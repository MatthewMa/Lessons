{"Name":"Nine Old Androids","Id":2143,"Alias":"NineOldAndroids","Description":"\n\u003ciframe src=\"https://appetize.io/embed/fp45tfdndcw7qu5v9gcy5dfux4?device=nexus5\u0026scale=75\u0026autoplay=true\u0026orientation=portrait\u0026deviceColor=black\" \n        width=\"300px\" height=\"597px\" frameborder=\"0\" scrolling=\"no\"\n        style=\"float:right;margin-left:1em;\"\u003e\u003c/iframe\u003e\n\nAndroid library for using the Honeycomb (Android 3.0) animation API on all versions\nof the platform back to 1.0!\n\nAnimation prior to Honeycomb was very limited in what it could accomplish so in \nAndroid 3.x a new API was written. With only a change in imports, we are able to \nuse a large subset of the new-style animation with exactly the same API.\n\nThis library also includes support for animating rotation, translation, alpha, \nand scale on platforms prior to Honeycomb!\n\n## Usage\n\nThe API is exactly the same as the Honeycomb API, just change your using to be:\n\n    using NineOldAndroids.Animation;\n\nFor example, to animate a `View` vertically off of the screen you can use \nan `ObjectAnimator`:\n\n    ObjectAnimator.OfFloat(myObject, \"translationY\", -myObject.Height).Start();\n\nIf you\u0027re familiar with the animation API already you should notice that this is \nprecisely what would be done with the native API. The only difference, however, \nis that we\u0027ve used the `NineOldAndroids.Animation` namespace at the top of the file\ninstead of `Android.Animation`.\n\nHere\u0027s another example of a `View` animating its own background to go from red to \nblue and then back again forever:\n\n    var red = new Color(255, 127, 127);\n    var blue = new Color(127, 127, 255);\n    \n    var colorAnim = ObjectAnimator.OfInt(this, \"backgroundColor\", red, blue);\n    colorAnim.SetDuration(3000);\n    colorAnim.SetEvaluator(new ArgbEvaluator());\n    colorAnim.RepeatCount = ValueAnimator.Infinite;\n    colorAnim.RepeatMode = ValueAnimatorRepeatMode.Reverse;\n    colorAnim.Start();\n\nThis library includes compatibility implementations of almost all of the new \nproperties which were introduced with Android 3.0 allowing you to perform very \ncomplex animations that work on every API level:\n\n    var set = new AnimatorSet();\n    set.PlayTogether(\n        ObjectAnimator.OfFloat(myView, \"rotationX\", 0, 360),\n        ObjectAnimator.OfFloat(myView, \"rotationY\", 0, 180),\n        ObjectAnimator.OfFloat(myView, \"rotation\", 0, -90),\n        ObjectAnimator.OfFloat(myView, \"translationX\", 0, 90),\n        ObjectAnimator.OfFloat(myView, \"translationY\", 0, 90),\n        ObjectAnimator.OfFloat(myView, \"scaleX\", 1, 1.5f),\n        ObjectAnimator.OfFloat(myView, \"scaleY\", 1, 0.5f),\n        ObjectAnimator.OfFloat(myView, \"alpha\", 1, 0.25f, 1)\n    );\n    set.SetDuration(5000);\n    set.Start();\n\nYou can also use a compatibility version of `ViewPropertyAnimator` which allows \nanimating views in a much more declarative manner:\n\n    var myButton = FindViewById\u003cButton\u003e(Resource.Id.myButton);\n    ViewPropertyAnimator.Animate(myButton)\n                        .SetDuration(2000)\n                        .RotationYBy(720)\n                        .X(100)\n                        .Y(100);\n\nThere are some caveats to using this API on versions of Android prior to Honeycomb:\n * The native Property class and its animation was introduced in Android 3.2 and is \n   thus not included in this library.  \n   There is, however, a `NineOldAndroids.Util.Property` type which allows you to \n   create custom properties on your own views for easier animation.\n * `LayoutTransition` is not possible to implement prior to Android 3.0 and is not \n   included.\n","Version":"2.4.0","Summary":"Android library for using the Honeycomb animation API on all versions of Android.","QuickStart":"\nAndroid library for using the Honeycomb (Android 3.0) animation API on all versions\nof the platform back to 1.0!\n\nAnimation prior to Honeycomb was very limited in what it could accomplish so in \nAndroid 3.x a new API was written. With only a change in imports, we are able to \nuse a large subset of the new-style animation with exactly the same API.\n\nThis library also includes support for animating rotation, translation, alpha, \nand scale on platforms prior to Honeycomb!\n\n## Usage\n\nThe API is exactly the same as the Honeycomb API, just change your using to be:\n\n    using NineOldAndroids.Animation;\n\nFor example, to animate a `View` vertically off of the screen you can use \nan `ObjectAnimator`:\n\n    ObjectAnimator.OfFloat(myObject, \"translationY\", -myObject.Height).Start();\n\nIf you\u0027re familiar with the animation API already you should notice that this is \nprecisely what would be done with the native API. The only difference, however, \nis that we\u0027ve used the `NineOldAndroids.Animation` namespace at the top of the file\ninstead of `Android.Animation`.\n\nHere\u0027s another example of a `View` animating its own background to go from red to \nblue and then back again forever:\n\n    var red = new Color(255, 127, 127);\n    var blue = new Color(127, 127, 255);\n    \n    var colorAnim = ObjectAnimator.OfInt(this, \"backgroundColor\", red, blue);\n    colorAnim.SetDuration(3000);\n    colorAnim.SetEvaluator(new ArgbEvaluator());\n    colorAnim.RepeatCount = ValueAnimator.Infinite;\n    colorAnim.RepeatMode = ValueAnimatorRepeatMode.Reverse;\n    colorAnim.Start();\n\nThis library includes compatibility implementations of almost all of the new \nproperties which were introduced with Android 3.0 allowing you to perform very \ncomplex animations that work on every API level:\n\n    var set = new AnimatorSet();\n    set.PlayTogether(\n        ObjectAnimator.OfFloat(myView, \"rotationX\", 0, 360),\n        ObjectAnimator.OfFloat(myView, \"rotationY\", 0, 180),\n        ObjectAnimator.OfFloat(myView, \"rotation\", 0, -90),\n        ObjectAnimator.OfFloat(myView, \"translationX\", 0, 90),\n        ObjectAnimator.OfFloat(myView, \"translationY\", 0, 90),\n        ObjectAnimator.OfFloat(myView, \"scaleX\", 1, 1.5f),\n        ObjectAnimator.OfFloat(myView, \"scaleY\", 1, 0.5f),\n        ObjectAnimator.OfFloat(myView, \"alpha\", 1, 0.25f, 1)\n    );\n    set.SetDuration(5000);\n    set.Start();\n\nYou can also use a compatibility version of `ViewPropertyAnimator` which allows \nanimating views in a much more declarative manner:\n\n    var myButton = FindViewById\u003cButton\u003e(Resource.Id.myButton);\n    ViewPropertyAnimator.Animate(myButton)\n                        .SetDuration(2000)\n                        .RotationYBy(720)\n                        .X(100)\n                        .Y(100);\n\nThere are some caveats to using this API on versions of Android prior to Honeycomb:\n * The native Property class and its animation was introduced in Android 3.2 and is \n   thus not included in this library.  \n   There is, however, a `NineOldAndroids.Util.Property` type which allows you to \n   create custom properties on your own views for easier animation.\n * `LayoutTransition` is not possible to implement prior to Android 3.0 and is not \n   included.\n","Hash":"a37d0fb0fc3979527689397a477eee31","TargetPlatforms":["android"],"TrialHash":null}